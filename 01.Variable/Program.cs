namespace _01.Variable
{
	internal class Program
	{
		static void Main(string[] args)
		{
			/*****************************************************************
            * 자료형 (Data Type)
            * 
            * 자료(데이터)의 형태를 지정
            * 데이터가 메모리에 저장되는 형태와 처리되는 방식을 명시하는 역할
            * 0과 1만으로 구성된 컴퓨터에게 여러 형태의 자료를 저장하기 위함
            *****************************************************************/

			// <자료형 종류>
			// 자료형 이름      자료형 형태          메모리 크기     표현 범위
			//
			// - 논리형 -
			// bool             논리 자료형          1byte           true(0이 아니면), false(0)
			//
			// - 정수형 -
			// byte             부호없는 정수형      1byte              0 ~ 255
			// sbyte            부호있는 정수형      1byte           -128 ~ 127
			//
			// short            부호있는 정수형      2byte           -2^15 ~ 2^15 - 1     =>  -32,768 ~ 32,767 
			// int              부호있는 정수형      4byte           -2^31 ~ 2^31 - 1     =>  -2,147,483,648 ~ 2,147,483,647
			// long             부호있는 정수형      8byte           -2^63 ~ 2^63 - 1     =>  -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807
			//                                                                                
			// ushort           부호없는 정수형      2byte           0 ~ 2^16 - 1         =>   0 ~ 65,535
			// uint             부호없는 정수형      4byte           0 ~ 2^32 - 1         =>   0 ~ 4,294,967,295
			// ulong            부호없는 정수형      8byte           0 ~ 2^64 - 1         =>   0 ~ 18,446,744,073,709,551,615
			//                                                                                
			// - 실수형 -                                                                     
			// float            부동소수점 실수      4byte           3.4e-38  ~ 3.4e+38   =>  약 소수점 7자리
			// double           부동소수점 실수      8byte           1.7e-308 ~ 1.7e+308  =>  약 소수점 15자리
			//
			// - 문자형 - 
			// char             유니코드 문자형      2byte           'a', 'b', '한', ...
			// string           유니코드 문자열        X             "abcde", "안녕", ...

			/************************************************************************
			* 변수 (variable)
			* 
			* 데이터를 저장하기 위해 프로그램에 의해 이름을 할당받은 메모리 공간
			* 데이터를 저장할 수 있는 메모리 공간을 의미하며, 저장된 값은 변경 가능
			************************************************************************/

			// <변수 선언 및 초기화>
			// 자료형의 선언하고 빈칸 뒤에 변수이름을 작성하여 변수 선언
			// 선언한 변수에 값을 처음 할당하는 과정을 초기화라고 함
			// 변수 선언과 초기화 과정을 동시에 진행할 수 있음
			int iValue = 10;                    // int 자료형의 이름이 iValue인 변수에 10의 데이터를 초기화
			float fValue;                       // float 자료형의 이름이 fValue인 변수를 선언하지만 값을 초기화하지 않음
												// int iValue;                      // error : 같은 이름의 변수는 사용 불가
												// Console.WriteLine(fValue);       // error : 선언한 변수에 값을 초기화하기 전까지 사용 불가

			// <변수에 데이터 저장>
			// =(대입연산자) 좌측에 변수를 배치
			iValue = 5;                         // iValue 변수에 5의 데이터 저장
			fValue = 1.2f;                      // fValue 변수에 1.2f 데이터를 초기화
												// 1.2  1.2f는 다른거다. 기본적으로 소수점 뒤에 d가 붙어 있음(double)

			// <변수의 데이터 불러오기>
			// 데이터가 필요한 곳에 변수명을 배치
			int rValue = 20;
			int lValue = rValue; // lValue는 20이 된다.
			Console.WriteLine($"rValue 변수에 보관된 데이터는 {rValue} 입니다.");
			Console.WriteLine($"lValue 변수에 보관된 데이터는 {lValue} 입니다."); // $는 문자열 보간

			int level = 0; // 초기화
			level = 10; // 대입

			int level2; // 선언
			level2 = 10; // 초기화
			level2 = 20; // 대입

			Console.Write("당신의 레벨 : ");
			Console.WriteLine(level);

			level = 20;

			Console.Write("당신의 레벨 : ");
			Console.WriteLine(level);

			level = 30;

			Console.Write("당신의 레벨 : ");
			Console.WriteLine(level);

			float level3 = 10.23456f;
			Console.WriteLine($"당신의 레벨은 {level3:F3}입니다"); // :F3은 소수점 3번째 자리까지만 보여준다라고 표시해주는것.
			Console.WriteLine($"당신의 레벨은 {level3,+10:F3}입니다"); // +10은 앞에 10칸 띄어서 쓰기
			Console.WriteLine($"당신의 레벨은 {level3,-10:F3}입니다"); // -10은 뒤에 10칸 띄어서 쓰기

			/*****************************************************************
             * 상수 (Constant)
             *
             * 프로그램이 실행되는 동안 변경할 수 없는 데이터
             * 프로그램에서 값이 변경되기를 원하지 않는 데이터가 있을 경우 사용
             * 저장된 값은 프로그램 종료시까지 변경 불가능
             ******************************************************************/

			// <상수 선언 및 초기화>
			// 변수 선언 앞에 const 키워드를 추가하여 상수 선언
			const int MAX = 200;        // MAX 상수 변수를 선언하고 초기화
			Console.WriteLine($"MAX 상수에 보관된 데이터는 {MAX} 입니다.");
			// const int Min;           // error : 상수는 초기화 없이 사용불가
			// Max = 20                 // error : 상수의 데이터 변경 불가
			// 상수는 항상 선언과 초기화를 같이 해줘야한다.
			// 상수는 대문자로만 쓰는게 국룰이다. 

			/*******************************************************************
             * 배열 (Array)
             * 
             * 동일한 자료형의 요소들로 구성된 데이터 집합
             * 인덱스를 통하여 배열요소(Element)에 접근할 수 있음
             * 배열의 처음 요소의 인덱스는 0부터 시작함
             *******************************************************************/

			// <1차원 배열 사용>
			// 자료형 뒤에 [] 괄호를 추가하여 배열로 사용함을 선언
			int[] iArray;                   // int 배열 선언
			iArray = new int[20];           // int 데이터를 20개 가지는 배열 생성
			iArray[0] = 20;                 // 배열의 0번째 변수에 20 대입
			float[] fArray = { 1.1f, 2.2f, 3.3f, 4.4f };  // 배열 선언과 초기화 배열의 크기는 초기화한 값만큼 자동으로 설정된다. = 크기 4개의 배열

			// <다차원 배열>
			// 다차원 배열의 선언은 자료형뒤에 []괄호를 추가하며, 추가하는 차원 수 만큼 ','를 추가
			int[,] matrix = new int[5, 10];   // 2차원 배열 10개 짜리 5개 => 50개 
			int[,,] cube = new int[3, 5, 20]; // 3차원 배열 20개 짜리 5개 3그룹 => 150개

			matrix[1, 3] = 20;

			/*****************************************************************
             * 형변환 (Casting)
             *
             * 데이터를 선언한 자료형에 맞는 형태로 변환하는 작업
             * 다른 자료형의 데이터를 저장하기 위해선 형변환 과정을 거쳐야하며,
             * 이 과정에서 보관할 수 없는 데이터는 버려짐
             ******************************************************************/

			// <명시적 형변환 - 수동>
			// 변환할 데이터의 앞에 변환할 자료형을 괄호안에 넣어 형변환 진행
			int damage = (int)29.9f;            // 29.9를 int로 변환하는 과정 중 보관할 수 없는 소수점은 버려짐
			// damage는 29로 나온다.
			int intValue = (int)1.2;            // 1.2를 int로 변환하는 과정 중 보관할 수 없는 소수점이 버려짐
			// int intValue = 1.2;              // error : 명시적 형변환 없이 변환 불가
			Console.WriteLine($"int 변수에 1.2를 형변환하여 집어넣은 데이터는 {intValue} 입니다.");

			// <묵시적 형변환 - 자동>
			double d1 = 1;						// int < float < double 순
			float d2 = 1;						// 데이터에 손실이 없으면 자동으로 변환이 된다.
			double ddd = 123.345f;              // double은 float를 포함하는 더 큰 범위이니 자동형변환 가능
			float f = (float)123.1111111111;
			Console.WriteLine(f);
			float f2 = (float)123.6666666666;
			Console.WriteLine(f2);
			float f3 = (float)123.123456789;
			Console.WriteLine(f3);

			// <문자 형변환과 아스키코드 & 유니코드>
			// 아스키코드 : 이진법을 사용하는 컴퓨터에서 문자를 표현하기 위해 정해둔 문자와 숫자의 매칭표
			// 유니코드 : 영어만 표현이 가능했던 아스키코드에서 전세계의 모든 문자를 다루도록 설계한 매칭표
			char key = (char)65;                // key = A가 들어간다.
			int value = (int)'a';               // value = 97이 들어간다.
			Console.WriteLine(key);
			Console.WriteLine(value);

			//int hp = int("100");				// 문자열 형식은 숫자로 변형할 수 없다. char는 되는데 string은 안됨. 예를 들어 감자라면 감자가 숫자로 몇인데? 이런 식
			int hp = int.Parse("100");
			float p = float.Parse("0.2");       // 자료형 . Parse로 변형할 수 있다.
			Console.WriteLine(p);
			//int b = int.Parse("감자");
			//Console.WriteLine(b);               // 문자가 들어간 순간 형변환이 안됨. 0.2는 가능하지만 0.2f는 안됨

			int.TryParse("100", out hp);        // 바꿀 수 있으면 100으로 해주고 
			Console.WriteLine(hp);
			int.TryParse("100asd", out hp);     // 바꿀 수 없다면 안 바뀌고 0으로 변환된다.
			Console.WriteLine(hp);

			string hundred = 100.ToString();    // 숫자를 문자형으로 바꿀라면 뒤에 .ToString을 해주면 된다. 
			string aaaa = 10.25f.ToString();    // float도 가능
			string bbbb = 10.123.ToString();    // double도 가능

			// 결론 : 숫자를 문자로는 무조건 바꿀 수 있다. ""만 붙여주면 되기 떄문. 모든 문자를 숫자로 바꿀수는 없다. 숫자인 문자만 변경이 가능하다. "100" 가능 "100f" 불가능
		}
	}
}
